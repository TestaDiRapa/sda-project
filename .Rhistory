} else {
columns <- colnames(df.data)[c(1,9,10,15,16,20,21,22,23,24,25,26,28,29,30,31)]
}
df.data <- df.data[which(df.data$iso_code %in% iso_codes), columns]
df.data <- na.omit(df.data)
df.data$total_cases <- df.data$total_cases_per_million
df.data$total_cases_per_million <- NULL
df.data$new_cases <- df.data$new_cases_per_million
df.data$new_cases_per_million <- NULL
df.data$new_tests <- df.data$new_tests_per_thousand
df.data$new_tests_per_thousand <- NULL
df.data$total_tests <- df.data$total_tests_per_thousand
df.data$total_tests_per_thousand <- NULL
actual_cases <- c()
for(code in iso_codes) {
tmp_actual <- df.data[df.data$iso_code == code,'total_cases']
actual_cases <- c(actual_cases, 0, tmp_actual[1:length(tmp_actual)-1])
}
df.data$actual_cases <- actual_cases
if(!iso) {
df.data$iso_code <- NULL
}
return(df.data)
}
plot_best_predictors = function(summary,fit){
dev.new()
par(mfrow=c(2,2))
plot(summary$rss ,xlab="Number of Variables ",ylab="RSS",type="l")
points(which.min(summary$rss),min(summary$rss), col="red",cex=2,pch=20)
plot(summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(summary$adjr2),max(summary$adjr2), col="red",cex=2,pch=20)
plot(summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(summary$cp ),min(summary$cp),col="red",cex=2,pch=20)
plot(summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(summary$bic),min(summary$bic),col="red",cex=2,pch=20)
dev.new()
plot(fit,scale="r2")
dev.new()
plot(fit,scale="adjr2")
dev.new()
plot(fit,scale="Cp")
dev.new()
plot(fit,scale="bic")
}
test_country <- function(df.test, iso, model) {
df.test <- df.test[df.test$iso_code == iso,]
to.plot <- data.frame(y_real = df.test$new_cases, date = df.test$date)
df.test$new_cases <- NULL
df.test$date <- NULL
to.plot$y_pred <- predict(model, newdata=df.test)
print(mean((to.plot$y_real-to.plot$y_pred)^2))
plot <- ggplot(to.plot, aes(x=date)) +
geom_line(aes(y=y_real, group=1)) +
geom_line(aes(y=y_pred, group=2), color='red')
print(plot)
}
#LOAD DATA##################
data_train = open_dataset(c('ITA', 'GBR', 'IND', 'JPN', 'ISR', 'LUX', 'AUS', 'AUT', 'NZL', 'ARG', 'BEL', 'CAN', 'ZAF', 'PRT','ISL','CHE'))
data_test = open_dataset( c('USA','IRN','KOR','URY'),TRUE,TRUE)
data_validation = open_dataset(c('RUS','TUR','DNK'))
#CONVERT DATA TO LOG RESPONSE#############################################
data_train.log <- data_train
data_train.log$new_cases <- log(data_train$new_cases + 0.1)
data_train.log$actual_cases = log(data_train$actual_cases + 0.1)
data_test.log <- data_test
data_test.log$new_cases <- log(data_test$new_cases + 0.1)
data_test.log$actual_cases = log(data_test$actual_cases + 0.1)
data_validation.log <- data_validation
data_validation.log$new_cases <- log(data_validation$new_cases + 0.1)
data_validation.log$actual_cases = log(data_validation$actual_cases + 0.1)
#CHECK DEPENDENCIES###################################
dev.new()
pairs(~new_cases+stringency_index+population_density+median_age+population,data_train)
dev.new()
pairs(~new_cases+aged_65_older+aged_70_older+gdp_per_capita,data_train)
dev.new()
pairs(~new_cases+cvd_death_rate+diabetes_prevalence+female_smokers+male_smokers,data_train)
dev.new()
pairs(~new_cases+new_tests+total_tests+actual_cases,data_train)
#FITTING LINEAR MODEL#########################
fit = lm(new_cases~.,data_train)
summary(fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(fit)
#REMOVE ININFLUENTIAL POINTS
cooksd <- cooks.distance(fit)
# Plot the Cook's Distance using the traditional 4/n criterion
sample_size <- nrow(data_train)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/sample_size, col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")  # add labels
influential <- as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
data_train = data_train[which(!(rownames(data_train) %in% influential)),]
# FITTING LINEAR MODEL WITHOUT ININFLUENT POINTS
fit = lm(new_cases~.,data_train)
summary(fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(fit)
#FITTING LINEAR MODEL LOG OF RESPONSE######################################
log.fit = lm(new_cases~.,data_train.log)
summary(log.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(log.fit)
#REMOVE ININFLUENTIAL POINTS
cooksd <- cooks.distance(log.fit)
# Plot the Cook's Distance using the traditional 4/n criterion
sample_size <- nrow(data_train.log)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/sample_size, col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")  # add labels
influential <- as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
data_train.log = data_train.log[which(!(rownames(data_train.log) %in% influential)),]
log.fit = lm(new_cases~.,data_train.log)
summary(log.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(log.fit)
#REFIT LINEAR MODEL WITH ONLY SIGNFICANT PREDICTORS###################
adj.fit = lm(new_cases~.-female_smokers-diabetes_prevalence-aged_70_older-cvd_death_rate,data_train)
summary(adj.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(adj.fit)
#REFIT LINEAR MODEL (LOG RESPONSE) WITH ONLY SIGNFICANT PREDICTORS#########
adjlog.fit = lm(new_cases~.-female_smokers-actual_cases,data_train.log)
summary(adjlog.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(adjlog.fit)
best.fit=regsubsets(new_cases~.,data_train,nvmax = 15)
reg.summary=summary(best.fit)
#PLOT TO CHOOSE THE BEST NUMBER OF PREDICTORS
plot_best_predictors(reg.summary,best.fit)
#CHECK MIN ERROR ON VALIDATION SET
test.mat=model.matrix(new_cases~.,data=data_validation)
val.errors=rep(NA,14)
for(i in 1:14){
coefi = coef(best.fit,id=i)
pred = test.mat[,names(coefi)]%*%coefi
val.errors[i] = mean((data_validation$new_cases-pred)^2)
}
val.errors; which.min(val.errors)
coef(best.fit,which.min(val.errors)) # This is based on training data
best.fit=regsubsets(new_cases~.,data_train,nvmax = 15)
reg.summary=summary(best.fit)
#PLOT TO CHOOSE THE BEST NUMBER OF PREDICTORS
plot_best_predictors(reg.summary,best.fit)
#CHECK MIN ERROR ON VALIDATION SET
test.mat=model.matrix(new_cases~.,data=data_validation)
val.errors=rep(NA,14)
for(i in 1:14){
coefi = coef(best.fit,id=i)
pred = test.mat[,names(coefi)]%*%coefi
val.errors[i] = mean((data_validation$new_cases-pred)^2)
}
val.errors; which.min(val.errors)
coef(best.fit,which.min(val.errors)) # This is based on training data
best.fit = lm(new_cases~stringency_index+population+median_age+gdp_per_capita+total_cases+new_tests+total_tests,data_train)
best.fit.poly =lm(new_cases~stringency_index+population+median_age+gdp_per_capita+total_cases+new_tests+total_tests*actual_cases,data_train)
best.fit.poly
summary(best.fit.poly)
test_country(data_test,"USA",best.fit.poly)
test_country(data_test,"USA",best.fit)
test_country(data_test,"IRN",best.fit)
test_country(data_test,"IRN",best.fit.poly)
test_country(data_test,"KOR",best.fit.poly)
test_country(data_test,"KOR",best.fit)
test_country(data_test,"URY",best.fit)
test_country(data_test,"URY",best.fit.poly)
best.fit.poly =lm(new_cases~stringency_index+population+median_age+gdp_per_capita+total_cases++total_tests+new_tests*actual_cases,data_train)
test_country(data_test,"USA",best.fit.poly)
test_country(data_test,"USA",best.fit)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+stringency_index*actual_cases,data_train)
summary(best.fit.poly)
test_country(data_test,"USA",best.fit)
test_country(data_test,"USA",best.fit.poly)
test_country(data_test,"KOR",best.fit)
test_country(data_test,"KOR",best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+poly(stringency_index*actual_cases,5),data_train)
summary(best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(stringency_index*actual_cases,4),data_train)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(stringency_index*actual_cases)^4,data_train)
test_country(data_test,"KOR",best.fit)
test_country(data_test,"KOR",best.fit.poly)
test_country(data_test,"USA",best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+poly(stringency_index*actual_cases,10),data_train)
summary(best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(stringency_index*actual_cases)^4,I(stringency_index*actual_cases)^6,I(stringency_index*actual_cases)^9,I(stringency_index*actual_cases)^10,data_train)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(stringency_index*actual_cases)^4,I(stringency_index*actual_cases)^6,I(stringency_index*actual_cases)^9,I(stringency_index*actual_cases)^10,data_train)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(stringency_index*actual_cases)^4,data_train)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(stringency_index*actual_cases)^4+I(stringency_index*actual_cases)^6+I(stringency_index*actual_cases)^9+I(stringency_index*actual_cases)^10,data_train)
test_country(data_test,"USA",best.fit.poly)
test_country(data_test,"USA",best.fit)
test_country(data_test,"USA",best.fit.poly)
test_country(data_test,"KOR",best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+poly(population_density*stringency_index,4),data_train)
summary(best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(population_density*stringency_index)^4+I(population_density*stringency_index)^3+I(population_density*stringency_index)^2+I(population_density*stringency_index)^1,data_train)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(population_density*stringency_index)^4+I(population_density*stringency_index)^3+I(population_density*stringency_index)^2+population_density*stringency_index,data_train)
test_country(data_test,"USA",best.fit.poly)
best.fit.poly =lm(new_cases~population+median_age+gdp_per_capita+total_cases+total_tests+new_tests+I(population_density*stringency_index)^4+I(population_density*stringency_index)^3+I(population_density*stringency_index)^2+population_density*stringency_index,data_train)
#LOAD LIBRARIES AND DEFINE FUNCTIONS##############################
library(leaps)
library(car)
library(glmnet)
library(ggplot2)
path_a="/Users/Antonio/Documents/GitHub/sda-project"
path_v="/Users/vincenzo/Documents/GitHub/sda-project"
setwd(path_a)
open_dataset <- function(iso_codes, dates=FALSE, iso=FALSE) {
df.data <- read.csv('covid-data.csv')
if(dates) {
columns <- colnames(df.data)[c(1,4,9,10,15,16,20,21,22,23,24,25,26,28,29,30,31)]
} else {
columns <- colnames(df.data)[c(1,9,10,15,16,20,21,22,23,24,25,26,28,29,30,31)]
}
df.data <- df.data[which(df.data$iso_code %in% iso_codes), columns]
df.data <- na.omit(df.data)
df.data$total_cases <- df.data$total_cases_per_million
df.data$total_cases_per_million <- NULL
df.data$new_cases <- df.data$new_cases_per_million
df.data$new_cases_per_million <- NULL
df.data$new_tests <- df.data$new_tests_per_thousand
df.data$new_tests_per_thousand <- NULL
df.data$total_tests <- df.data$total_tests_per_thousand
df.data$total_tests_per_thousand <- NULL
actual_cases <- c()
for(code in iso_codes) {
tmp_actual <- df.data[df.data$iso_code == code,'total_cases']
actual_cases <- c(actual_cases, 0, tmp_actual[1:length(tmp_actual)-1])
}
df.data$actual_cases <- actual_cases
if(!iso) {
df.data$iso_code <- NULL
}
return(df.data)
}
plot_best_predictors = function(summary,fit){
dev.new()
par(mfrow=c(2,2))
plot(summary$rss ,xlab="Number of Variables ",ylab="RSS",type="l")
points(which.min(summary$rss),min(summary$rss), col="red",cex=2,pch=20)
plot(summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(summary$adjr2),max(summary$adjr2), col="red",cex=2,pch=20)
plot(summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(summary$cp ),min(summary$cp),col="red",cex=2,pch=20)
plot(summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(summary$bic),min(summary$bic),col="red",cex=2,pch=20)
dev.new()
plot(fit,scale="r2")
dev.new()
plot(fit,scale="adjr2")
dev.new()
plot(fit,scale="Cp")
dev.new()
plot(fit,scale="bic")
}
test_country <- function(df.test, iso, model) {
df.test <- df.test[df.test$iso_code == iso,]
to.plot <- data.frame(y_real = df.test$new_cases, date = df.test$date)
df.test$new_cases <- NULL
df.test$date <- NULL
to.plot$y_pred <- predict(model, newdata=df.test)
print(mean((to.plot$y_real-to.plot$y_pred)^2))
plot <- ggplot(to.plot, aes(x=date)) +
geom_line(aes(y=y_real, group=1)) +
geom_line(aes(y=y_pred, group=2), color='red')
print(plot)
}
#LOAD DATA##################
data_train = open_dataset(c('ITA', 'GBR', 'IND', 'JPN', 'ISR', 'LUX', 'AUS', 'AUT', 'NZL', 'ARG', 'BEL', 'CAN', 'ZAF', 'PRT','ISL','CHE'))
data_test = open_dataset( c('USA','IRN','KOR','URY'),TRUE,TRUE)
data_validation = open_dataset(c('RUS','TUR','DNK'))
#CONVERT DATA TO LOG RESPONSE#############################################
data_train.log <- data_train
data_train.log$new_cases <- log(data_train$new_cases + 0.1)
data_train.log$actual_cases = log(data_train$actual_cases + 0.1)
data_test.log <- data_test
data_test.log$new_cases <- log(data_test$new_cases + 0.1)
data_test.log$actual_cases = log(data_test$actual_cases + 0.1)
data_validation.log <- data_validation
data_validation.log$new_cases <- log(data_validation$new_cases + 0.1)
data_validation.log$actual_cases = log(data_validation$actual_cases + 0.1)
#CHECK DEPENDENCIES###################################
dev.new()
pairs(~new_cases+stringency_index+population_density+median_age+population,data_train)
dev.new()
pairs(~new_cases+aged_65_older+aged_70_older+gdp_per_capita,data_train)
dev.new()
pairs(~new_cases+cvd_death_rate+diabetes_prevalence+female_smokers+male_smokers,data_train)
dev.new()
pairs(~new_cases+new_tests+total_tests+actual_cases,data_train)
#FITTING LINEAR MODEL#########################
fit = lm(new_cases~.,data_train)
summary(fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(fit)
#REMOVE ININFLUENTIAL POINTS
cooksd <- cooks.distance(fit)
# Plot the Cook's Distance using the traditional 4/n criterion
sample_size <- nrow(data_train)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/sample_size, col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")  # add labels
influential <- as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
data_train = data_train[which(!(rownames(data_train) %in% influential)),]
# FITTING LINEAR MODEL WITHOUT ININFLUENT POINTS
fit = lm(new_cases~.,data_train)
summary(fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(fit)
vif(fit)
#REFIT LINEAR MODEL WITH ONLY SIGNFICANT PREDICTORS###################
adj.fit = lm(new_cases~.-female_smokers-diabetes_prevalence-aged_70_older-cvd_death_rate,data_train)
#FITTING LINEAR MODEL LOG OF RESPONSE######################################
log.fit = lm(new_cases~.,data_train.log)
summary(log.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(log.fit)
#REMOVE ININFLUENTIAL POINTS
cooksd <- cooks.distance(log.fit)
# Plot the Cook's Distance using the traditional 4/n criterion
sample_size <- nrow(data_train.log)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/sample_size, col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")  # add labels
influential <- as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
data_train.log = data_train.log[which(!(rownames(data_train.log) %in% influential)),]
log.fit = lm(new_cases~.,data_train.log)
summary(log.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(log.fit)
#REFIT LINEAR MODEL WITH ONLY SIGNFICANT PREDICTORS###################
adj.fit = lm(new_cases~.-female_smokers-diabetes_prevalence-aged_70_older-cvd_death_rate,data_train)
summary(adj.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(adj.fit)
function (mod, ...)
vif(adj.fit)
vif(adj.fit)
#LOAD LIBRARIES AND DEFINE FUNCTIONS##############################
library(leaps)
library(car)
library(glmnet)
library(ggplot2)
path_a="/Users/Antonio/Documents/GitHub/sda-project"
path_v="/Users/vincenzo/Documents/GitHub/sda-project"
setwd(path_a)
open_dataset <- function(iso_codes, dates=FALSE, iso=FALSE) {
df.data <- read.csv('covid-data.csv')
if(dates) {
columns <- colnames(df.data)[c(1,4,9,10,15,16,20,21,22,23,24,25,26,28,29,30,31)]
} else {
columns <- colnames(df.data)[c(1,9,10,15,16,20,21,22,23,24,25,26,28,29,30,31)]
}
df.data <- df.data[which(df.data$iso_code %in% iso_codes), columns]
df.data <- na.omit(df.data)
df.data$total_cases <- df.data$total_cases_per_million
df.data$total_cases_per_million <- NULL
df.data$new_cases <- df.data$new_cases_per_million
df.data$new_cases_per_million <- NULL
df.data$new_tests <- df.data$new_tests_per_thousand
df.data$new_tests_per_thousand <- NULL
df.data$total_tests <- df.data$total_tests_per_thousand
df.data$total_tests_per_thousand <- NULL
actual_cases <- c()
for(code in iso_codes) {
tmp_actual <- df.data[df.data$iso_code == code,'total_cases']
actual_cases <- c(actual_cases, 0, tmp_actual[1:length(tmp_actual)-1])
}
df.data$actual_cases <- actual_cases
if(!iso) {
df.data$iso_code <- NULL
}
return(df.data)
}
plot_best_predictors = function(summary,fit){
dev.new()
par(mfrow=c(2,2))
plot(summary$rss ,xlab="Number of Variables ",ylab="RSS",type="l")
points(which.min(summary$rss),min(summary$rss), col="red",cex=2,pch=20)
plot(summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(summary$adjr2),max(summary$adjr2), col="red",cex=2,pch=20)
plot(summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(summary$cp ),min(summary$cp),col="red",cex=2,pch=20)
plot(summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(summary$bic),min(summary$bic),col="red",cex=2,pch=20)
dev.new()
plot(fit,scale="r2")
dev.new()
plot(fit,scale="adjr2")
dev.new()
plot(fit,scale="Cp")
dev.new()
plot(fit,scale="bic")
}
test_country <- function(df.test, iso, model) {
df.test <- df.test[df.test$iso_code == iso,]
to.plot <- data.frame(y_real = df.test$new_cases, date = df.test$date)
df.test$new_cases <- NULL
df.test$date <- NULL
to.plot$y_pred <- predict(model, newdata=df.test)
print(mean((to.plot$y_real-to.plot$y_pred)^2))
plot <- ggplot(to.plot, aes(x=date)) +
geom_line(aes(y=y_real, group=1)) +
geom_line(aes(y=y_pred, group=2), color='red')
print(plot)
}
#LOAD DATA##################
data_train = open_dataset(c('ITA', 'GBR', 'IND', 'JPN', 'ISR', 'LUX', 'AUS', 'AUT', 'NZL', 'ARG', 'BEL', 'CAN', 'ZAF', 'PRT','ISL','CHE'))
data_test = open_dataset( c('USA','IRN','KOR','URY'),TRUE,TRUE)
data_validation = open_dataset(c('RUS','TUR','DNK'))
#CONVERT DATA TO LOG RESPONSE#############################################
data_train.log <- data_train
data_train.log$new_cases <- log(data_train$new_cases + 0.1)
data_train.log$actual_cases = log(data_train$actual_cases + 0.1)
data_test.log <- data_test
data_test.log$new_cases <- log(data_test$new_cases + 0.1)
data_test.log$actual_cases = log(data_test$actual_cases + 0.1)
data_validation.log <- data_validation
data_validation.log$new_cases <- log(data_validation$new_cases + 0.1)
data_validation.log$actual_cases = log(data_validation$actual_cases + 0.1)
#CHECK DEPENDENCIES###################################
dev.new()
pairs(~new_cases+stringency_index+population_density+median_age+population,data_train)
dev.new()
pairs(~new_cases+aged_65_older+aged_70_older+gdp_per_capita,data_train)
dev.new()
pairs(~new_cases+cvd_death_rate+diabetes_prevalence+female_smokers+male_smokers,data_train)
dev.new()
pairs(~new_cases+new_tests+total_tests+actual_cases,data_train)
#FITTING LINEAR MODEL#########################
fit = lm(new_cases~.,data_train)
summary(fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(fit)
#REMOVE ININFLUENTIAL POINTS
cooksd <- cooks.distance(fit)
# Plot the Cook's Distance using the traditional 4/n criterion
sample_size <- nrow(data_train)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/sample_size, col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")  # add labels
influential <- as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
data_train = data_train[which(!(rownames(data_train) %in% influential)),]
# FITTING LINEAR MODEL WITHOUT ININFLUENT POINTS
fit = lm(new_cases~.,data_train)
summary(fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(fit)
#FITTING LINEAR MODEL LOG OF RESPONSE######################################
log.fit = lm(new_cases~.,data_train.log)
summary(log.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(log.fit)
#REMOVE ININFLUENTIAL POINTS
cooksd <- cooks.distance(log.fit)
# Plot the Cook's Distance using the traditional 4/n criterion
sample_size <- nrow(data_train.log)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4/sample_size, col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4/sample_size, names(cooksd),""), col="red")  # add labels
influential <- as.numeric(names(cooksd)[(cooksd > (4/sample_size))])
data_train.log = data_train.log[which(!(rownames(data_train.log) %in% influential)),]
log.fit = lm(new_cases~.,data_train.log)
summary(log.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(log.fit)
#REFIT LINEAR MODEL WITH ONLY SIGNFICANT PREDICTORS###################
adj.fit = lm(new_cases~.-female_smokers-diabetes_prevalence-aged_70_older-cvd_death_rate,data_train)
summary(adj.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(adj.fit)
vif(adj.fit)
adj.fit = lm(new_cases~.-female_smokers-diabetes_prevalence-aged_70_older-cvd_death_rate-median_age-aged_65_older,data_train)
summary(adj.fit)
# model diagnositic plots
dev.new()
par(mfrow=c(2,2))
plot(adj.fit)
